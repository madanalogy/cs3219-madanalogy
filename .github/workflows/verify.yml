name: Verify

on: [pull_request]

jobs:
  verify:
    name: Verify
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2.1.1
        with:
          node-version: 12

      - name: Cache App Dependencies
        uses: actions/cache@v2.1.3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-app-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        env:
          CYPRESS_INSTALL_BINARY: 0 # Skip install of Cypress (handled in its own job)
          HUSKY_SKIP_INSTALL: 1 # Skip install of Husky
        run: |
          npm ci --loglevel error
          npm --prefix functions ci --loglevel error

      - name: Set App Environment Settings
        env:
          SERVICE_ACCOUNT: ${{ secrets.MASTER_SERVICE_ACCOUNT }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF: ${{ github.ref }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          set -o pipefail

          # Throw a clear error if FIREBASE_TOKEN secret is not set
          if [ -z "$FIREBASE_TOKEN" ];
            then
              missingTokenErrMsg="\"FIREBASE_TOKEN\" github secret is required to load project configuration. Visit https://github.com/${{ github.repository }}/settings/secrets to set."
              echo "::error ::$missingTokenErrMsg"
              exit 1
          fi

          # Get branch name from github ref (i.e. refs/heads/master -> master)
          gitBranch=${GITHUB_REF##*/}

          # Find the config associated to the firebase project in .firebaserc (falling back to default)
          gcloudProject=$(cat .firebaserc | jq -r --arg alias "$gitBranch" '.projects[$alias] // .projects.default')
          appName=cs3219-madanalogy
          echo "Setting environment for branch: $gitBranch, project: $gcloudProject, and app: $appName..."

          echo "Setting emulator settings to environment..."
          databaseEmulatorHost=localhost:$(cat firebase.json | jq .emulators.database.port)
          emulatorHost=localhost:$(cat firebase.json | jq .emulators.firestore.port)
          
          # Set variables to environment to be used in later steps
          echo "::set-env name=REACT_APP_FIREBASE_DATABASE_EMULATOR_HOST::$databaseEmulatorHost"
          echo "::set-env name=REACT_APP_FIRESTORE_EMULATOR_HOST::$emulatorHost"
          echo "::set-env name=REACT_APP_FB_databaseURL::http://$databaseEmulatorHost?ns=$gcloudProject"
          echo "::set-env name=GCLOUD_PROJECT::$gcloudProject"

          # Generate Service Account file required to prevent credential error during functions unit tests (jq used to format)
          echo "Generating Service Account File..."
          echo "$(echo $SERVICE_ACCOUNT | jq .)" > $HOME/serviceAccount.json
          echo "::set-env name=GOOGLE_APPLICATION_CREDENTIALS::$HOME/serviceAccount.json"

          # Use Firebase SDK API to get the app's configuration and export to REACT_APP prefixed environment variables
          # NOTE: databaseURL is intentionally removed since it is set above

          # Use firebase SDK API to get the app's configuration and export to CYPRESS. NOTE: databaseURL is intentionally removed
          firebaseConfig=$(npx firebase --project $gcloudProject apps:sdkconfig WEB \
            $(npx firebase --project $gcloudProject apps:list WEB | grep $appName | awk '{ print $4}') | \
              tr '\n' ' ' | \
              sed 's/.*initializeApp(//g' | \
              sed 's/);//g' | \
              jq -r 'del(.databaseURL) | to_entries[] | [.key, (.value | tojson)] | join("::")' | \
              sed 's/:"/:/g; s/^/echo \"::set-env name=REACT_APP_FIREBASE_/g' \
          )

          # Loop through each line of config and evaluate to export env vars
          while IFS= read -r line; do
            echo Evaluating: $line
            eval $line
          done <<< "$firebaseConfig"

      - name: Verify App
        run: |
          npm run lint # Check for lint in app code

      - name: Unit Test Functions
        run: |
          npm run functions:test:cov -- --project $GCLOUD_PROJECT # Run unit tests with coverage

      - name: Upload Test Coverage For Functions
        # NOTE: Token will need to be added if using codecov with private repos
        run: |
          bash <(curl -s https://codecov.io/bash) -f functions/coverage/lcov.info || echo 'Codecov failed to upload'

      - name: Build Functions
        run: |
          npm run functions:build

      - name: Build App
        run: |
          npm run build

      - name: Archive Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build
